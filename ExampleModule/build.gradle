if (isModule.toBoolean()) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

apply plugin: 'com.jakewharton.butterknife'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //签名
    signingConfigs {
        debug {
            storeFile file(RELEASE_STORE_FILE)
            keyAlias RELEASE_KEY_ALIAS
            storePassword RELEASE_KEY_PASSWORD
            keyPassword RELEASE_STORE_PASSWORD
        }
        release {
            storeFile file(RELEASE_STORE_FILE)
            keyAlias RELEASE_KEY_ALIAS
            storePassword RELEASE_KEY_PASSWORD
            keyPassword RELEASE_STORE_PASSWORD
        }
    }


    sourceSets {
        main {
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }

        development.setRoot('build-types/Development')
        baidu.setRoot('build-types/Baidu')
        m360.setRoot('build-types/M360')
        tencent.setRoot('build-types/Tencent')
        wandoujia.setRoot('build-types/Wandoujia')
        xiaomi.setRoot('build-types/Xiaomi')
        huawei.setRoot('build-types/Huawei')
        lenove.setRoot('build-types/Lenove')
        googleplay.setRoot('build-types/Googleplay')
    }

    packagingOptions {
        if (isModule.toBoolean()) {
            exclude 'lib/armeabi/*.so'
            exclude 'lib/arm64-v8a/*.so'
            exclude 'lib/armeabi-v7a/*.so'
            exclude 'lib/x86/*.so'
            exclude 'lib/x86_64/*.so'
        }
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
        exclude 'org/apache/http/version.properties'
        exclude 'org/apache/http/entity/mime/version.properties'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    implementation project(':xPort')
    api rootProject.ext.dependencies["arouter"]
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]

    api rootProject.ext.dependencies["dagger"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    provided rootProject.ext.dependencies["annotation"]
    compile 'com.android.support:multidex:1.0.1'
}
